(()=>{"use strict";var __webpack_modules__={49:function(__unused_webpack_module,exports,__webpack_require__){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.VoteCommand=exports.CardCommand=exports.CahCommand=void 0;const game_1=__webpack_require__(769),globals_1=__webpack_require__(888),CahCommand={definition:{id:"de.justjakob.cahgame::cah",name:"Cards Against Humanity control",active:!0,trigger:"!cah",description:"Cards Against Humanity game control",subCommands:[{name:"Cards Against Humanity start command",active:!0,trigger:"",id:"de.justjakob.cahgame::start",arg:"start",regex:!1,usage:"start",description:"Start a new game of Cards Against Humanity."},{name:"Cards Against Humanity stop command",active:!0,trigger:"",id:"de.justjakob.cahgame::stop",arg:"stop",regex:!1,usage:"stop",description:"Stop the currently running game of Cards Against Humanity"}]},onTriggerEvent:event=>__awaiter(void 0,void 0,void 0,(function*(){if(1===event.userCommand.args.length)switch(event.userCommand.args[0]){case"start":if(game_1.CahGame.currentGame)return void globals_1.default.twitchChat.sendChatMessage("There is already a game of Cards Against Humanity running!",null,null,event.chatMessage.id);game_1.CahGame.currentGame=yield game_1.CahGame.newGame();break;case"stop":game_1.CahGame.currentGame&&game_1.CahGame.currentGame.stop(),game_1.CahGame.currentGame=null}}))};exports.CahCommand=CahCommand;const CardCommand={definition:{id:"de.justjakob.cahgame::card",name:"Draw card",active:!0,trigger:"!card",description:"Draw a Cards Against Humanity white card"},onTriggerEvent:event=>{if(!game_1.CahGame.currentGame)return;const{userCommand}=event,username=userCommand.commandSender;game_1.CahGame.currentGame.userHasDrawn(username)?globals_1.default.twitchChat.sendChatMessage("Sorry, but you can only draw once per round.",null,null,event.chatMessage.id):game_1.CahGame.currentGame.draw(username)}};exports.CardCommand=CardCommand;const VoteCommand={definition:{id:"de.justjakob.cahgame::vote",name:"Vote for card",active:!0,trigger:"!vote\\s[0-9]+",description:"Vote for a Cards Against Humanity card combo",triggerIsRegex:!0},onTriggerEvent:event=>{if(!game_1.CahGame.currentGame)return;const{userCommand}=event,username=userCommand.commandSender;if(game_1.CahGame.currentGame.userHasVoted(username))return void globals_1.default.twitchChat.sendChatMessage("Sorry, but you can only vote once per round.",null,null,event.chatMessage.id);const vote=parseInt(userCommand.args[0]);game_1.CahGame.currentGame.vote(username,vote-1)||(69==vote?globals_1.default.twitchChat.sendChatMessage("Nice!",null,null,event.chatMessage.id):globals_1.default.twitchChat.sendChatMessage("Invalid vote",null,null,event.chatMessage.id))}};exports.VoteCommand=VoteCommand},242:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0});exports.default={id:"de.justjakob.cahgame",name:"Cards Against Humanity",events:[{id:"game-started",name:"Game started",description:"When a new game is started",cached:!1},{id:"game-ended",name:"Game ended",description:"When a game ends (independent of outcome)",cached:!1,manualMetadata:{blackCard:{text:"This is a _ card.",pick:1},winners:[{texts:["test"],user:"Firebot"}]}}]}},179:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.CahGameHasWinner=void 0;const CahGameHasWinner={id:"de.justjakob.cahgame:has-winner",name:"Winner",description:"Has the game ended with a winner?",events:[{eventSourceId:"de.justjakob.cahgame",eventId:"game-ended"}],comparisonTypes:["is","is not"],valueType:"preset",presetValues:(...args)=>Promise.resolve([{value:"available",display:"Available"}]),predicate(filterSettings,eventData){const available=!!eventData.eventMeta.winners.length;switch(filterSettings.comparisonType){case"is":return Promise.resolve(available);case"is not":return Promise.resolve(!available)}}};exports.CahGameHasWinner=CahGameHasWinner},769:function(__unused_webpack_module,exports,__webpack_require__){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CahGame=exports.GamePhase=void 0;const fs=__webpack_require__(147),globals_1=__webpack_require__(888),commands_1=__webpack_require__(49);var GamePhase;!function(GamePhase){GamePhase.Drawing="drawing",GamePhase.Voting="voting",GamePhase.Finished="finished"}(GamePhase=exports.GamePhase||(exports.GamePhase={}));class CahGame{static newGame(){return __awaiter(this,void 0,void 0,(function*(){return new Promise(((resolve,reject)=>{fs.readFile(globals_1.default.settings.settings.cardSource.packFile,"utf-8",(function(err,data){if(err)return reject(err);const pack=JSON.parse(data);resolve(new CahGame(pack.black[Math.floor(Math.random()*pack.black.length)],CahGame.shuffle(pack.white)))}))}))}))}static shuffle(input){const array=[...input];for(let i=array.length-1;i>0;i--){let j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]]}return array}constructor(blackCard,whiteCards){this.draws=[],this.winners=[],this.phase=GamePhase.Drawing,this.votes={},this.blackCard=blackCard,this.whiteCards=whiteCards,this.sendState(),globals_1.default.eventManager.triggerEvent("de.justjakob.cahgame","game-started",{blackCard:this.blackCard}),globals_1.default.commandManager.registerSystemCommand(commands_1.CardCommand),this.timeout=setTimeout((()=>{this.nextPhase()}),1e3*(globals_1.default.settings.settings.gameSettings.drawingTime||60))}getVotingTime(){const baseTime=globals_1.default.settings.settings.gameSettings.votingTime||60,extraTime=globals_1.default.settings.settings.gameSettings.extraTime||10;return baseTime+this.draws.length*extraTime}nextPhase(){switch(this.timeout=null,this.phase){case GamePhase.Drawing:if(!this.draws.length)return globals_1.default.twitchChat.sendChatMessage("No card draws, Cards Against Humanity aborted."),void this.stop();this.draws=CahGame.shuffle(this.draws),this.phase=GamePhase.Voting,this.timeout=setTimeout((()=>{this.nextPhase()}),1e3*this.getVotingTime()),globals_1.default.commandManager.unregisterSystemCommand(commands_1.CardCommand.definition.id),globals_1.default.commandManager.registerSystemCommand(commands_1.VoteCommand);break;case GamePhase.Voting:this.winners=this.getWinners(),this.winners.length||globals_1.default.twitchChat.sendChatMessage("No votes cast. Cards Against Humanity ended without a winner."),this.stop()}this.sendState()}sendState(){globals_1.default.httpServer.sendToOverlay("cah",{blackCard:this.blackCard.text,whiteCards:this.draws,phase:this.phase,winners:this.winners,drawingTime:globals_1.default.settings.settings.gameSettings.drawingTime||60,votingTime:this.getVotingTime(),lingerTime:globals_1.default.settings.settings.gameSettings.lingerTime||10,position:globals_1.default.settings.settings.overlaySettings.position||"center-center"})}userHasDrawn(user){return void 0!==this.draws.find((draw=>draw.user==user))}draw(user){const draw={user,texts:[...new Array(this.blackCard.pick)].map((()=>this.whiteCards.shift()))};this.draws.push(draw);const accountType=globals_1.default.settings.settings.chatSettings.whisperAccount;1==this.blackCard.pick?globals_1.default.twitchChat.sendChatMessage(`You drew a card that says "${draw.texts[0]}".`,user,accountType):globals_1.default.twitchChat.sendChatMessage(`You drew ${this.blackCard.pick} cards that say "${draw.texts.join('", "')}".`,user,accountType),this.sendState()}userHasVoted(user){return user in this.votes}vote(user,index){return index<this.draws.length&&(this.votes[user]=index,!0)}getWinners(){const values=Object.values(this.votes);if(!values.length)return[];const sorted=values.reduce(((acc,index)=>(acc[index]+=1,acc)),new Array(this.draws.length).fill(0)).map(((votes,index)=>({votes,draw:this.draws[index]}))).sort(((a,b)=>b.votes-a.votes)),max=sorted[0].votes;return sorted.filter((x=>x.votes>=max)).map((x=>x.draw))}stop(){this.phase=GamePhase.Finished,globals_1.default.commandManager.unregisterSystemCommand(commands_1.CardCommand.definition.id),globals_1.default.commandManager.unregisterSystemCommand(commands_1.VoteCommand.definition.id),this.sendState(),globals_1.default.eventManager.triggerEvent("de.justjakob.cahgame","game-ended",{blackCard:this.blackCard,winners:this.winners}),clearTimeout(this.timeout),CahGame.currentGame=null}}exports.CahGame=CahGame},62:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});const globals_1=__webpack_require__(888),commands_1=__webpack_require__(49),game_1=__webpack_require__(769),GameDefinition={id:"de.justjakob.cahgame",name:"Cards Against Humanity",subtitle:"Fill the blanks",description:"A fill-in-the-blank party game that turns your awkward personality and lackluster social skills into hours of fun!",icon:"clone",settingCategories:{cardSource:{title:"Pack settings",description:"Where to find the card files",sortRank:1,settings:{packFile:{type:"filepath",title:"CAH JSON file",description:"Cards Against Humanity pack file (available from https://crhallberg.com/cah/)",tip:"",showBottomHr:!1,default:"",sortRank:2,validation:{required:!0}}}},gameSettings:{title:"Game settings",description:"General game settings",sortRank:3,settings:{drawingTime:{type:"number",title:"Drawing time",description:"How long should the drawing phase last?",tip:"Time in seconds",showBottomHr:!1,default:60,sortRank:4,validation:{required:!0,min:0}},votingTime:{type:"number",title:"Voting time",description:"How long should the voting phase last?",tip:"Time in seconds",showBottomHr:!1,default:60,sortRank:5,validation:{required:!0,min:0}},extraTime:{type:"number",title:"Extra voting time per drawn white card",description:"Adds an amount of time to the voting countdown for each card drawn",tip:"Time in seconds",showBottomHr:!1,default:10,sortRank:6,validation:{required:!1,min:0}},lingerTime:{type:"number",title:"Linger time",description:"How long should the voting results stay on screen?",tip:"Time in seconds",showBottomHr:!1,default:10,sortRank:7,validation:{required:!0,min:0}}}},overlaySettings:{title:"Overlay settings",description:"Change on-stream overlay behaviour",sortRank:8,settings:{position:{type:"enum",title:"Overlay position",description:"Where should the overlay appear on screen?",tip:"",showBottomHr:!1,default:"center-center",sortRank:9,options:{"top-left":"Top left","top-center":"Top center","top-right":"Top right","center-left":"Center left","center-center":"Center","center-right":"Center right","bottom-left":"Bottom left","bottom-center":"Bottom center","bottom-right":"Bottom right"},validation:{required:!0}}}},chatSettings:{title:"Chat settings",description:"Configure chat messages",sortRank:10,settings:{whisperAccount:{type:"chatter-select",title:"Card Whisper account",description:"What account should be used to whisper the drawn card to users?",tip:"",showBottomHr:!1,default:null,sortRank:9,validation:{required:!1}}}}},onLoad:gameSettings=>{globals_1.default.settings=gameSettings||globals_1.default.gameManager.getGameSettings(GameDefinition.id),globals_1.default.commandManager.registerSystemCommand(commands_1.CahCommand)},onUnload:gameSettings=>{game_1.CahGame.currentGame=null,globals_1.default.commandManager.unregisterSystemCommand(commands_1.CahCommand.definition.id)},onSettingsUpdate:gameSettings=>{var _a;null===(_a=game_1.CahGame.currentGame)||void 0===_a||_a.sendState()}};exports.default=GameDefinition},888:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0});exports.default={commandManager:null,twitchChat:null,httpServer:null,eventManager:null,gameManager:null,settings:null}},531:function(__unused_webpack_module,exports){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0});const CahOverlay={definition:{id:"de.justjakob.cahmangame::overlayEffect",name:"Cards Against Humanity overlay",description:"Cards Against Humanity overlay",icon:"clone",categories:[],dependencies:[]},optionsTemplate:"",optionsController:($scope,utilityService)=>{},optionsValidator:effect=>[],onTriggerEvent:event=>__awaiter(void 0,void 0,void 0,(function*(){return!0})),overlayExtension:{dependencies:{css:[],globalStyles:'\n    .cah {\n        width: 100vw;\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .cah.cah--top {\n        align-items: start;\n    }\n    \n    .cah.cah--bottom {\n        align-items: end;\n    }\n    \n    .cah.cah--left {\n        justify-content: left;\n    }\n    \n    .cah.cah--right {\n        justify-content: right;\n    }\n\n    .cah-wrapper {\n        background-color: rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        box-sizing: border-box;\n        font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;\n        font-weight: bold;\n        font-size: 20pt;\n        color: black;\n        min-width: 700px;\n        max-height: 100vh;\n        display: flex;\n        flex-direction: column;\n        flex-grow: 0;\n        margin: 20px;\n    }\n    \n    .cah-cards {\n        flex: 1;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        overflow: hidden;\n        align-items: start;\n    }\n    \n    .cah-card {\n        background-color: white;\n        border-radius: 10px;\n        width: 200px;\n        min-height: 300px;\n        padding: 20px;\n        margin: 10px;\n        display: flex;\n        flex-direction: column;\n        flex-shrink: 0;\n    }\n    \n    .cah-text {\n        flex: 1;\n        overflow: hidden;\n        overflow-wrap: break-word;\n        text-overflow: ellipsis;\n    }\n    \n    .cah-user {\n        text-align: center;\n        font-size: 16pt;\n        font-style: italic;\n    }\n    \n    .cah-card--black {\n        background-color: black;\n        color: white;\n    }\n    \n    .cah-footer {\n        flex: 0;\n        background-color: white;\n        border-radius: 10px;\n        color: black;\n        padding: 20px;\n        text-align: center;\n    }\n    \n    .cah-whitecards {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n    \n    .cah-cardstack {\n        display: flex;\n        flex-direction: column;\n        min-height: 340px;\n        background-color: white;\n        border-radius: 10px;\n        margin: 10px;\n    }\n    \n    .cah-cardstack > .cah-card {\n        border-top: 1px solid black;\n        min-height: unset;\n        margin: 0;\n        flex: 1 0 auto;\n    }\n    \n    .cah-cardstack > .cah-card:first-child {\n        border-top: none;\n    }\n    \n    .cah-cardstack .cah-user,\n    .cah-cardstack .cah-vote {\n        padding: 5px;\n    }\n    \n    .cah-phase--drawing .cah-card--white .cah-text {\n        display: none;\n        height: unset;\n    }\n    \n    .cah-vote {\n        display: none;\n        text-align: center;\n    }\n    \n    .cah-phase--voting .cah-cardstack .cah-vote {\n        display: unset;\n    }\n    \n    .cah-phase--voting .cah-cardstack .cah-user {\n        display: none;\n    }\n',js:[]},event:{name:"cah",onOverlayEvent:data=>{const $wrapper=$(".wrapper");let $el=$wrapper.find(".cah");const selectedClasses=data.position.split("-").map((p=>"cah--"+p)).join(" "),allClasses=["top","bottom","left","right","center"].map((p=>"cah--"+p)).join(" ");if($el.removeClass(allClasses).addClass(selectedClasses),data.phase){if(data.phase&&"finished"==data.phase){if(!data.winners.length)return void $el.remove();setTimeout((()=>{$el.remove()}),1e3*data.lingerTime)}if(!$el.length){$el=$(`\n                            <div class="cah ${selectedClasses}">\n                                <div class="cah-wrapper">\n                                    <div class="cah-cards">\n                                        <div class="cah-card cah-card--black"><div class="cah-text"></div></div>\n                                        <div class="cah-whitecards"></div>\n                                    </div>\n                                    <div class="cah-footer">\n                                        <span class="cah-message">Type "!card" in chat to draw a card!</span>\n                                        <span class="cah-countdown"><span class="cah-remaining">${data.drawingTime}</span> seconds left!</span>\n                                    </div>\n                                </div>\n                            </div>\n                        `),$wrapper.append($el);const timer={interval:null,remaining:data.drawingTime,phase:data.phase};$el.data("timer",timer)}$el.removeClass("cah-phase--voting cah-phase--drawing cah-phase--finished").addClass("cah-phase--"+data.phase),$el.find(".cah-card--black .cah-text").html(data.blackCard.replace(/_/g,"____________").replace(/\\n/g,"<br/>"));const renderDraw=(draw,index)=>`\n                        <div class="cah-cardstack">\n                            ${draw.texts.map((text=>`\n                                <div class="cah-card cah-card--white">\n                                    <div class="cah-text">${text}</div>\n                                </div>\n                            `)).join("")}\n                            <div class="cah-user">${draw.user}</div>\n                            <div class="cah-vote">!vote ${index+1}</div>\n                        </div>\n                    `,cards=data.winners.length?data.winners:data.whiteCards;$el.find(".cah-whitecards").html(cards.map(renderDraw).join(""));const timer=$el.data("timer");if(timer){const $message=$el.find(".cah-message"),$countdown=$el.find(".cah-countdown"),$remaining=$countdown.find(".cah-remaining");if(timer.phase!==data.phase){switch(data.phase){case"drawing":timer.remaining=data.drawingTime;break;case"voting":$message.text("Vote for your favorite card now!"),timer.remaining=data.votingTime;break;case"finished":$message.text("We have a winner!"),$countdown.text("")}timer.phase=data.phase}$remaining.text(timer.remaining),timer.interval||(timer.interval=setInterval((()=>{--timer.remaining<=0&&(clearInterval(timer.interval),timer.interval=null),$remaining.text(timer.remaining)}),1e3))}}else $el.remove()}}}};exports.default=CahOverlay},892:function(__unused_webpack_module,exports,__webpack_require__){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0});const globals_1=__webpack_require__(888),game_1=__webpack_require__(769),CahTriggerEffect={definition:{id:"de.justjakob.cahgame::startEffect",name:"Trigger Cards Against Humanity",description:"Starts a new game of Cards Against Humanity",icon:"fa-clone",categories:[],dependencies:[]},onTriggerEvent:event=>__awaiter(void 0,void 0,void 0,(function*(){return globals_1.default.settings.active?game_1.CahGame.currentGame?Promise.reject(new Error("There is already a game of Cards Against Humanity running")):void(game_1.CahGame.currentGame=yield game_1.CahGame.newGame()):Promise.reject(new Error("Cards Against Humanity game is not active"))})),optionsTemplate:""};exports.default=CahTriggerEffect},449:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.CahWinningComboVariable=exports.CahWinnerVariable=exports.CahBlackCardVariable=void 0;const CahBlackCardVariable={definition:{handle:"cahBlackCard",description:"Cards Against Humanity black card",triggers:{event:["de.justjakob.cahgame:game-started","de.justjakob.cahgame:game-ended"],manual:!0},possibleDataOutput:["text"]},evaluator:(trigger,...args)=>trigger.metadata.eventData.blackCard.text.replace(/_/g,"[blank]").replace(/\\n/g,"\n")};function naturalJoin(input){return input.length?1==input.length?input[0]:input.slice(0,-1).join(", ")+" and "+input.slice(-1):""}exports.CahBlackCardVariable=CahBlackCardVariable;const CahWinnerVariable={definition:{handle:"cahWinner",description:"Winner of the Cards Against Humanity game",triggers:{event:["de.justjakob.cahgame:game-ended"],manual:!0},possibleDataOutput:["text"]},evaluator:(trigger,...args)=>naturalJoin(trigger.metadata.eventData.winners.map((x=>x.user)))};exports.CahWinnerVariable=CahWinnerVariable;const CahWinningComboVariable={definition:{handle:"cahWinningCombo",description:"Winning Combo of the Cards Against Humanity game",triggers:{event:["de.justjakob.cahgame:game-ended"],manual:!0},possibleDataOutput:["text"]},evaluator(trigger,...args){const draws=trigger.metadata.eventData.winners,blackCard=trigger.metadata.eventData.blackCard;return naturalJoin(draws.map((draw=>{const replacements=draw.texts.map((x=>`[${x}]`));let result=blackCard.text.replace(/_/g,(()=>replacements.shift()));return replacements.length&&(result+=" "+replacements.join(" ")),result.replace(/\\n/g,"\n")})))}};exports.CahWinningComboVariable=CahWinningComboVariable},147:module=>{module.exports=require("fs")}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(void 0!==cachedModule)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={exports:{}};return __webpack_modules__[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.exports}var __webpack_exports__={};(()=>{var exports=__webpack_exports__;const gamedef_1=__webpack_require__(62),globals_1=__webpack_require__(888),events_1=__webpack_require__(242),overlay_1=__webpack_require__(531),trigger_1=__webpack_require__(892),variables_1=__webpack_require__(449),filters_1=__webpack_require__(179),script={run:runRequest=>{globals_1.default.commandManager=runRequest.modules.commandManager,globals_1.default.twitchChat=runRequest.modules.twitchChat,globals_1.default.httpServer=runRequest.modules.httpServer,globals_1.default.eventManager=runRequest.modules.eventManager,globals_1.default.gameManager=runRequest.modules.gameManager,runRequest.modules.gameManager.registerGame(gamedef_1.default),runRequest.modules.eventManager.registerEventSource(events_1.default),runRequest.modules.effectManager.registerEffect(overlay_1.default),runRequest.modules.effectManager.registerEffect(trigger_1.default),[variables_1.CahBlackCardVariable,variables_1.CahWinnerVariable,variables_1.CahWinningComboVariable].forEach((v=>runRequest.modules.replaceVariableManager.registerReplaceVariable(v))),runRequest.modules.eventFilterManager.registerFilter(filters_1.CahGameHasWinner)},getDefaultParameters:()=>({}),getScriptManifest:()=>({name:"Cards Against Humanity",description:"Cards Against Humanity game",author:"Jakob Ketterl",version:"0.1"})};exports.default=script})(),module.exports=__webpack_exports__.default})();